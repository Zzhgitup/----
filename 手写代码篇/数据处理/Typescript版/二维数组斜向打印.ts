(function () {
  function printMaxit(arr: number[][]) {
    let row = arr.length; //行 x
    let conlum = arr[0].length; //列 y
    let res: any = [];
    //左上角  从0开始打印到conlum-1；
    for (let k = 0; k < conlum; k++) {
      for (let i = 0, j = k; i < row && j >= 0; i++, j--) {
        res.push(arr[i][j]);
      }
    }
    //右下角
    for (let k = 1; k < row; k++) {
      for (let i = k, j = row; i < row && j >= 0; i++, j--) {
        res.push(arr[i][j]);
      }
    }
    return res;
  }
  const matrix2 = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
  ];
  console.log(printMaxit(matrix2));
})();
/* 
给定的代码定义了一个名为`printMatrix`的函数，它接受一个二维数组(`arr`)作为输入，并返回一个数组(`res`)，其中包含按特定模式打印矩阵的元素。

代码的工作原理如下：

1. 函数首先初始化变量`m`和`n`，用于存储矩阵的行数和列数。

2. 然后，创建一个空数组`res`，用于存储打印出的矩阵元素。

3. 接下来，通过两个嵌套的循环来按特定模式打印矩阵的元素。

   - 第一个循环从左上角开始，从0到n-1列进行迭代。其中，变量`k`表示当前列数。

     - 内部循环使用变量`i`和`j`分别表示当前元素的行和列。

     - 循环条件是`i`小于行数`m`且`j`大于等于0。

     - 在每次迭代中，将`arr[i][j]`添加到结果数组`res`中，并将`i`递增，`j`递减。

   - 第二个循环从右下角开始，从1到m-1行进行迭代。其中，变量`k`表示当前行数。

     - 内部循环使用变量`i`和`j`分别表示当前元素的行和列。

     - 循环条件是`i`小于行数`m`且`j`大于等于0。

     - 在每次迭代中，将`arr[i][j]`添加到结果数组`res`中，并将`i`递增，`j`递减。

4. 循环结束后，将结果数组`res`返回作为函数的输出。

总体而言，该函数按照一种特定的模式遍历二维数组，并将遍历到的元素按顺序存储在一个新的数组中。
*/
